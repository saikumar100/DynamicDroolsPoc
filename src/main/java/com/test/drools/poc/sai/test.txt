 public KieContainer initializeDrools() {
        KieServices kieServices = KieServices.Factory.get();
        Resource dt
                = ResourceFactory
                .newClassPathResource(RuleConstants.RULES_XLSX_FILE_NAME,
                        getClass());

        KieFileSystem kieFileSystem = kieServices.newKieFileSystem().write(dt);
        KieBuilder kieBuilder = kieServices.newKieBuilder(kieFileSystem);
        kieBuilder.buildAll();
        KieRepository kieRepository = kieServices.getRepository();
        ReleaseId krDefaultReleaseId = kieRepository.getDefaultReleaseId();
        Results results = kieBuilder.getResults();
        if( results.hasMessages( Message.Level.ERROR ) ){
            log.error ("{} errors from kie: {}", ProgramPerformanceUtil.TransactionIdLogger.getTransactionIdentifier (), results.getMessages ());
            throw new IllegalStateException( "### errors ###" );
        }

        return kieServices.newKieContainer(krDefaultReleaseId);
    }
    
     KieContainer kieContainer = initializeDrools();
      KieSession kieSession = kieContainer.newKieSession();
        kieSession.setGlobal(RuleConstants.SUMMARY, summary);
        kieSession.setGlobal(RuleConstants.DETAIL, detail);
        kieSession.setGlobal(RuleConstants.SUMMARY_LIST, opportunitiesSummaryList);
        kieSession.setGlobal(RuleConstants.DETAIL_LIST, opportunitiesDetailList);
        kieSession.insert(opportunityInput);
        kieSession.fireAllRules();
  <dependency>
            <groupId>org.kie</groupId>
            <artifactId>kie-ci</artifactId>
            <version>${drools.version}</version>
        </dependency>

        <dependency>
            <groupId>org.drools</groupId>
            <artifactId>drools-decisiontables</artifactId>
            <version>${drools.version}</version>
        </dependency>
        
         List<List<RuleAction>> batchSizedList = ListUtils.partition(inputData, BATCH_SIZE);

            for (List<RuleAction> dataBatchList : batchSizedList) {
                if (!dataBatchList.isEmpty()) {
                    log.info("== Sending Rule InputData to the Kie server ==");

                    List<RuleAction> outList = new ArrayList<>();

                    KieCommands commandsFactory = KieServices.Factory.get().getCommands();

                    SetGlobalCommand setDetailListCommand = new SetGlobalCommand();
                    setDetailListCommand.setIdentifier(DATA_LIST);
                    setDetailListCommand.setObject(outList);
                    setDetailListCommand.setOutIdentifier(DATA_LIST);

                    //batch insertion
                    List<Object> objects = new ArrayList<>(dataBatchList);
                    Command<?> insertElementsCommand = commandsFactory.newInsertElements(objects);

                    Command<?> fireAllRules = commandsFactory.newFireAllRules();
                    Command<?> disposeCommand = commandsFactory.newDispose();

                    BatchExecutionCommand batchExecutionCommand = commandsFactory.newBatchExecution(
                            Arrays.asList(setDetailListCommand, insertElementsCommand, fireAllRules, disposeCommand));


                    ServiceResponse<ExecutionResults> executeResponse = rulesClient.executeCommandsWithResults(containerId, batchExecutionCommand);

                    if (executeResponse.getType() == KieServiceResponse.ResponseType.SUCCESS) {
                        log.info("Received - Commands executed with success! Response: ");

                        List<RuleAction> ruleBatchList=(List<RuleAction>) executeResponse.getResult().getValue(DATA_LIST);

                        log.info("RuleBatchList size = {}", !ruleBatchList.isEmpty() ? ruleBatchList.size():" Empty Response");

                        dataList.addAll(ruleBatchList);

                    } else {
                        log.info("Error executing rules. Message: ");
                        log.error("Error Message: {}", executeResponse.getMsg());
                    }
                }
            }
            
            ---------------------
            ./standalone.sh  -Dorg.uberfire.nio.git.hooks=/usr/local/local-hooks/ -b 0.0.0.0 -bmanagement 0.0.0.0 &

./standalone.sh  -b 0.0.0.0 -bmanagement 0.0.0.0 &


-Dorg.uberfire.nio.git.hooks=/usr/local/local-hooks/

ssh <machine name>

scp -r .niogit/. <machine name>:/usr/local/jbpm/bin/.niogit

scp -r id_rsa.pub <machine name>:/app1/

scp -r <machine name>:/app1/latest-jbpm/jbpm/bin/.niogit/  <machine name>:/app1/jbpm/bin/.niogit/


sudo du -h /home | sort -rh | head -5

ssh-keygen -t rsa -b 4096 -C "saisras100@gmail.com"


cat ~/.ssh/id_rsa.pub | ssh remote_username@server_ip_address "mkdir -p ~/.ssh && chmod 700 ~/.ssh && cat >> ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys"


cat ~/.ssh/id_rsa.pub | ssh remote_username@server_ip_addres  "cat >> ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys"

sudo df -h /home | sort -rh | head -5


cat id_rsa.pub | mkdir -p ~/.ssh && chmod 700 ~/.ssh && cat >> ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys

cat /app1/.ssh/ssh.pub | ssh remote_username@server_ip_addres "mkdir -p ~/.ssh && chmod 700 ~/.ssh && cat >> ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys"

cat id_rsa.pub | ssh remote_username@server_ip_addres "mkdir -p ~/.ssh && chmod 700 ~/.ssh && cat >> ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys"

cat ~/.ssh/id_rsa.pub | ssh remote_username@server_ip_addres "mkdir -p ~/.ssh && chmod 700 ~/.ssh && cat >> ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys"

cat ~/.ssh/id_rsa.pub | ssh remote_username@server_ip_addres "mkdir -p ~/.ssh && chmod 700 ~/.ssh && cat >> ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys"


max-post-size="26214400" 

git config --global credential.helper store

cat  ~/.git-credentials


START KIE SERVER IN LOCAL
>>go to wildfly-19.0.0.Final>>bin>> and run below command


standalone.bat --server-config=standalone-full.xml -Dorg.kie.server.id=wildfly-kieserver -Dorg.kie.server.location=http://localhost:8080/kie-server/services/rest/server 
-Dorg.kie.server.controller=http://localhost:8080/kie-wb/rest/controller


http://localhost:8080/kie-wb/kie-wb.jsp


